Q1.


i) CeilingFan.java
package assignment6;

public class CeilingFan {
	public static final int HIGH=3;
	public static final int MEDIUM=2;
	public static final int LOW=1;
	public static final int OFF=0;
	String location;
	int speed;

	public CeilingFan(String location){
		this.location=location;
		speed=OFF;
	}
	public void high(){
		speed=HIGH;
		System.out.println(location + " "+ "Fan is on High Speed");
	}
	
	public void medium(){
		speed=MEDIUM;
		System.out.println(location + " "+ "Fan is on medium Speed");
	}
	
	public void low(){
		speed=LOW;
		System.out.println(location + " "+ "Fan is on low Speed");
	}
	
	public void off(){
		speed=OFF;
		System.out.println(location + " "+ "Fan is off");
	}
	public int getSpeed(){
		return speed;
	
	}
}

ii) Command.java
package assignment6;

public interface Command {
	public void execute();
	public void undo();

}



iii) CeilingFanHighCommand.java
package assignment6;
public abstract class CeilingFanHighCommand implements Command{
	CeilingFan ceilingFan;
	int prevSpeed;
	
	public class CeilingFanHighCommand(CeilingFan ceilingFan){
		this.ceilingFan ceilingFan;
	}
	public void execute(){
	prevSpeed=ceilingFan.getSpeed();
	}
	public void undo(){
		if(prevSpeed==CeilingFan.HIGH){
		ceilingFan.high();
	}else if(prevSpeed==CeilingFan.MEDIUM){	
		ceilingFan.medium();
	}else if(prevSpeed==CeilingFan.LOW){	
		ceilingFan.low();
	}else if(prevSpeed==CeilingFan.OFF){	
		ceilingFan.off();
	}
}


	@Override
	public void execute() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void undo() {
		// TODO Auto-generated method stub
		
	}


iv) NoCommand.java

package assignment6;

public class NoCommand implements Command {
	public void execute() {
	}
	public void undo() {
	}
}






v) CeilingFanMediumCommand.java
package assignment6;
public class CeilingFanMediumCommand implements Command {
	CeilingFan ceilingFan;
	int prevSpeed;
	
	public CeilingFanMediumCommand(CeilingFan ceilingFan){
		this.ceilingFan = ceilingFan;
	}
	public void execute(){
	prevSpeed=ceilingFan.getSpeed();
	ceilingFan.medium();
	}
	public void undo(){
		if(prevSpeed==CeilingFan.MEDIUM){
		ceilingFan.medium();
	}else if(prevSpeed==CeilingFan.HIGH){	
		ceilingFan.high();
	}else if(prevSpeed==CeilingFan.LOW){	
		ceilingFan.low();
	}else if(prevSpeed==CeilingFan.OFF){	
		ceilingFan.off();
	}
}
}


vi) CeilingFanOffCommand.java

package assignment6;
public class CeilingFanOffCommand implements Command {
	CeilingFan ceilingFan;
	int prevSpeed;
	
	public CeilingFanOffCommand(CeilingFan ceilingFan){
		this.ceilingFan = ceilingFan;
	}
	public void execute(){
	prevSpeed=ceilingFan.getSpeed();
	ceilingFan.off();
	}
	public void undo(){
		if(prevSpeed==CeilingFan.HIGH){
		ceilingFan.high();
	}else if(prevSpeed==CeilingFan.MEDIUM){	
		ceilingFan.medium();
	}else if(prevSpeed==CeilingFan.LOW){	
		ceilingFan.low();
	}else if(prevSpeed==CeilingFan.OFF){	
		ceilingFan.off();
	}
}

}



vii) RemoteControlWithUndo.java
package assignment6;
public class RemoteControlWithUndo{
	Command[] onCommands;
	Command[] offCommands;
	Command undoCommand;

public RemoteControlWithUndo(){
	onCommands= new Command[5];
	offCommands= new Command[5];
	
	Command noCommand=new NoCommand();
 //The NoCommand object is an example of null object.
	for(int i=0;i<5;i++){
	onCommands[i]=noCommand;
	offCommands[i]=noCommand;
	}
	undoCommand=noCommand;
	}
	
	public void setCommand(int slot, Command onCommand, Command offCommand){
	onCommands[slot]=onCommand;
	offCommands[slot]=offCommand;
	}

	public void onButtonWasPushed(int slot){
	onCommands[slot].execute();
	undoCommand = onCommands[slot];	
	}
	public void offButtonWasPushed(int slot){
	offCommands[slot].execute();
	undoCommand = offCommands[slot];	
	}
	
	public void undoButtonWasPushed(){
		undoCommand.undo();	
	}
	public String toString(){
	StringBuffer stringBuff= new StringBuffer();
	stringBuff.append("\n*****Remote Control*****\n");
	for(int i=0; i<onCommands.length; i++){
		stringBuff.append("[slot"+i+"]"+onCommands[i].getClass().getName()
				+"    "+offCommands[i].getClass().getName()+"\n");
	}
	return stringBuff.toString();
	}	

}












viii) RemoteLoader.java

package assignment6;
public class RemoteLoader {
	public static void main(String[] args){
		RemoteControlWithUndo remoteControl=new RemoteControlWithUndo();

		CeilingFan ceilingFan=new CeilingFan("Living Room");

		CeilingFanMediumCommand ceilingFanMedium=new CeilingFanMediumCommand(ceilingFan);
		CeilingFanHighCommand ceilingFanHigh=new CeilingFanHighCommand(ceilingFan);
		CeilingFanOffCommand ceilingFanOff=new CeilingFanOffCommand(ceilingFan);

		remoteControl.setCommand(0,ceilingFanMedium, ceilingFanOff);
		remoteControl.setCommand(1,ceilingFanHigh, ceilingFanOff);

		remoteControl.onButtonWasPushed(0);
		remoteControl.offButtonWasPushed(0);
		System.out.println(remoteControl);
		remoteControl.undoButtonWasPushed();

		remoteControl.onButtonWasPushed(1);
		remoteControl.offButtonWasPushed(1);
		remoteControl.undoButtonWasPushed();
	}
}



Q2.


import pandas as pd
import numpy as np 

dataset=pd.read_csv("diabetes.csv")
dataset

x=dataset.iloc[:,:-1].values
y=dataset.iloc[:,-1].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=11)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.transform(x_test) 

from sklearn.naive_bayes import GaussianNB
nb=GaussianNB()
nb.fit(x_train,y_train)

y_pred=nb.predict(x_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
ac=accuracy_score(y_test, y_pred)*100
print(ac)



Q3.


var http = require('http');
http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
  res.write('<input type="file" name="filetoupload"><br>');
  res.write('<input type="submit">');
  res.write('</form>');
  return res.end();
}).listen(8080);
