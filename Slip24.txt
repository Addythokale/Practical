Q1.


i) Menu.java
package assignment8;
import java.util.Iterator;

public interface Menu {
	public Iterator createIterator();
}

ii) Iterator.java
 package assignment8;
import java.util.*;

public interface Iterator {
	boolean hasNext();
	Object next();

}


iii) MenuTestDrive.java
package assignment8;

public class MenuTestDrive {

	public static void main(String[] args) {
		PancakeHouseMenu pancakeHouseMenu= new PancakeHouseMenu();
		DinerMenu dinerMenu= new DinerMenu();
		Waitress waitress=new Waitress(pancakeHouseMenu, dinerMenu);
		waitress.printMenu();
	}

}


iv)Menu.java
package assignment8;

public class MenuItem {
	String name;
	String description;
	boolean vegetarian;
	double price;
 
	public MenuItem(String name, String description, boolean vegetarian, double price) 
	{
		this.name = name;
		this.description = description;
		this.vegetarian = vegetarian;
		this.price = price;
	}
  
	public String getName() {
		return name;
	}
  
	public String getDescription() {
		return description;
	}
  
	public double getPrice() {
		return price;
	}
  
	public boolean isVegetarian() {
		return vegetarian;
	}
	public String toString() {
		return (name + ", $" + price + "\n   " + description);
	}
}

v) DinerMenu.java
package assignment8;
import java.util.Iterator;
public class DinerMenu implements Menu {
	
	static final int MAX_ITEMS = 6;
	int numberOfItems = 0;
	MenuItem[] menuItems;
  
	public DinerMenu() {
		menuItems = new MenuItem[MAX_ITEMS];
 
		addItem("Vegetarian BLT","(Fakin') Bacon with lettuce & tomato on whole wheat", true, 2.99);
		
		addItem("BLT", "Bacon with lettuce & tomato on whole wheat", false, 2.99);
		
		addItem("Soup of the day","Soup of the day, with a side of potato salad", false, 3.29);
		
		addItem("Hotdog","A hot dog, with saurkraut, relish, onions, topped with cheese",false, 3.05);
		
		addItem("Steamed Veggies and Brown Rice", "Steamed vegetables over brown rice", true, 3.99);
		
		addItem("Pasta","Spaghetti with Marinara Sauce, and a slice of sourdough bread",true, 3.89);
	}
  
	public void addItem(String name, String description, boolean vegetarian, double price) 
	{
		MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		if (numberOfItems >= MAX_ITEMS) {
			System.err.println("Sorry, menu is full!  Can't add item to menu");
		} else {
			menuItems[numberOfItems] = menuItem;
			numberOfItems = numberOfItems + 1;
		}
	}
 
	public MenuItem[] getMenuItems() {
		return menuItems;
	}

	@Override
	public Iterator createIterator() {
		return new DinerMenuIterator(menuItems);	
	}
}
vi) DinerMenuIterator.java
package assignment8;
import java.util.Iterator;
public class DinerMenuIterator implements Iterator {
	MenuItem[] items;
	int position = 0;
 	public DinerMenuIterator(MenuItem[] items) {
		this.items = items;
	}
 
	public Object next() {
		MenuItem menuItem = items[position];
		position = position + 1;
		return menuItem;
	}
 
	public boolean hasNext() {
		if (position >= items.length || items[position] == null) {
			return false;
		} else {
			return true;
		}
	}
}

vii) PancakeHouseIterator.java 
package assignment8;
import java.util.ArrayList;
public class PancakeHouseIterator implements Iterator {
	ArrayList items;
    int position = 0;
    public PancakeHouseIterator(ArrayList items) {
        this.items = items;
    }
    @Override
    public boolean hasNext() {
        if ((position >= items.size()) || (items.get(position) == null)) {
            return false;
        } else {
            return true;
        }
    }
    @Override
    public Object next() {
        MenuItem menuItem = (MenuItem) items.get(position);
        position = position + 1;
        return menuItem;
    }
}

viii) PancakeHouseMenu.java
package assignment8;
import java.util.ArrayList;
import java.util.Iterator;
public class PancakeHouseMenu implements Menu {
	ArrayList menuItems;
	 
	public PancakeHouseMenu() {
		menuItems = new ArrayList();
    
		addItem("K & B's Pancake Breakfast", "Pancakes with scrambled eggs, and toast", true, 2.99);
//name, description, vegeteraian,price 
 
		addItem("Regular Pancake Breakfast", "Pancakes with fried eggs, sausage", false, 2.99);
 
		addItem("Blueberry Pancakes", "Pancakes made with fresh blueberries", true,3.49);
 
		addItem("Waffles","Waffles, with your choice of blueberries or strawberries",true,3.59);
	}

	public void addItem(String name, String description, boolean vegetarian, double price)
	{
		MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
		menuItems.add(menuItem);
	}
 
	public ArrayList getMenuItems() {
		return menuItems;
	}
  
	public Iterator createIterator() {
		//return new PancakeHouseIterator(menuItems);
		return menuItems.iterator();
	}
  
	public String toString() {
		return "Pancake House Menu";
	}

}

ix) Waitress.java
package assignment8;
import java.util.Iterator;
public class Waitress {
	Menu pancakeHouseMenu;			//implementing Menu
	Menu dinerMenu;
 
	public Waitress(Menu pancakeHouseMenu, Menu dinerMenu) {
		this.pancakeHouseMenu = pancakeHouseMenu;
		this.dinerMenu = dinerMenu;
	}
 
	public void printMenu() {
		Iterator pancakeIterator =pancakeHouseMenu.createIterator();
		Iterator dinerIterator = dinerMenu.createIterator();

		System.out.println("MENU\n----\nBREAKFAST");
		printMenu(pancakeIterator);			//Call the overloaded printMenu()
		System.out.println("\nDinner");
		printMenu(dinerIterator);
	}
 
	private void printMenu(Iterator iterator) {
		while (iterator.hasNext()) {
			MenuItem menuItem = (MenuItem)iterator.next();
			System.out.print(menuItem.getName() + ", ");
			System.out.print(menuItem.getPrice() + " -- ");
			System.out.println(menuItem.getDescription());
		}
	}
}





Q2.


import pandas as pd
import numpy as np

dataset = pd.read_csv("iris.csv")
dataset

dataset.info()
from sklearn.preprocessing import LabelEncoder
l1 = LabelEncoder()
dataset['New_Category']=l1.fit_transform(dataset['Species'])
dataset



Q3.


accounts/models.py

from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.db import models

class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError('The Email field must be set')
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)

        return self.create_user(email, password, **extra_fields)

class CustomUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    objects = CustomUserManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['first_name', 'last_name']

    def __str__(self):
        return self.email


accounts/forms.py

from django import forms
from django.contrib.auth.forms import AuthenticationForm

class LoginForm(AuthenticationForm):
    class Meta:
        fields = ['username', 'password']



accounts/views.py

from django.contrib.auth.views import LoginView, LogoutView
from django.urls import reverse_lazy
from django.views.generic.edit import CreateView
from .forms import LoginForm

class CustomLoginView(LoginView):
    template_name = 'accounts/login.html'
    form_class = LoginForm

class CustomLogoutView(LogoutView):
    next_page = reverse_lazy('login')



accounts/urls.py

from django.urls import path
from .views import CustomLoginView, CustomLogoutView

urlpatterns = [
    path('login/', CustomLoginView.as_view(), name='login'),
    path('logout/', CustomLogoutView.as_view(), name='logout'),
]



urls.py

# In your project's urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('accounts/', include('accounts.urls')),
]



templates/accounts/login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
</head>
<body>
    <h2>Login</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Login</button>
    </form>
</body>
</html>


templates/accounts/logout.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logout</title>
</head>
<body>
    <h2>Logout</h2>
    <p>You have been logged out.</p>
</body>
</html>



