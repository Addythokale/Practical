Q1.


i) PizzaTest.java
package Assignment;

public class PizzaTest {

public static void main(String[] args) {
//first order
PizzaStorenyStore = new NYPizzaStore();
Pizza pizza = nyStore.orderPizza("Cheese");
System.out.println("Bharat ordered a "+pizza.getName()+"\nbn");

System.out.println("**********------------*************----------*********"+"\n");

//Second order
PizzaStorechicagoStore = new ChicagoPizzaStore();
pizza = chicagoStore.orderPizza("Cheese");
System.out.println("Pratiksha ordered a "+pizza.getName()+"\n");
}

}




ii) PizzaStore.java

package Assignment;

public abstract class PizzaStore {
	
	public Pizza orderPizza(String type)
	{
		Pizza pizza;
		pizza = createPizza(type);
		pizza.prepare();
		pizza.bake();
		pizza.cut();
		pizza.box();
		return pizza;
	}
	protected abstract Pizza createPizza(String type);

}



iii)Pizza.java

package Assignment;

import java.util.*;
public class Pizza {
	
	String name;
	String dough;
	String sauce;
	ArrayList toppings = new ArrayList();
	
	void prepare()
	{
		System.out.println("Preparing" +name);
		System.out.println("Tossing dough...");
		System.out.println("Adding Souce...");
		System.out.println("Adding toppings...");
		
		for(int i=0;i<toppings.size();i++)
		{
			System.out.println(""+toppings.get(i));
		}
	}
	
	void bake()
	{
		System.out.println("Bake for 25 mins...");
	}
	
	void cut()
	{
		System.out.println("Cutting into diagonal slices ...");
	}
	
	void box()
	{
		System.out.println("Place into Pizzastore box");
	}
	public String getName()
	{
		return name;
	}

}


iv) ChicagoPizzaStore.java

package Assignment;

public class ChicagoPizzaStore extends PizzaStore{
	
	public Pizza createPizza(String item)
	{
		if(item.equals("Cheese"))
		{
			return new ChicagoStyleCheesePizza();
		}
		else return null;
	}

}



v) ChicagoStyleCheesePizza.java

package Assignment;

public class ChicagoStyleCheesePizza extends Pizza{
	
	public ChicagoStyleCheesePizza() 
	{
		name = "Chicago style Deep Dish Cheese Pizza";
		dough = "Extra Thick Crust Dough";
		sauce = "Plum Tomato Sauce";
		
		toppings.add("Shreddded Mazzarella Cheese..");
	}
	
	void cut()
	{
		System.out.println("***Cutting the pizza into square slices***");
	}

}


vi) NYPizzaStore.java

package Assignment;

public class NYPizzaStore extends PizzaStore{
	
	public Pizza createPizza(String item)
	{
		if(item.equals("Cheese"))
		{
			return new NYStyleCheesePizza();
		}
		else return null;
	}

}


vii) NYStyleCheesePizza.java

package Assignment;

public class NYStyleCheesePizza extends Pizza{
	
	public NYStyleCheesePizza() 
	{
		name = "Chicago style Deep Dish Cheese Pizza";
		dough = "Extra Thick Crust Dough";
		sauce = "Plum Tomato Sauce";
		
		toppings.add("Shreddded Mazzarella Cheese..");
	}
	
	void cut()
	{
		System.out.println("***Cutting the pizza into square slices***");
	}

}



Q2.

# Import the Libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn import svm, datasets 

 # Import some Data from the iris Data Set
iris = datasets.load_iris() 
X = iris.data[:, :2]
y = iris.target  

# C is the SVM regularization parameter
C = 1.0  
 # Create an Instance of SVM and Fit out the data.
# Data is not scaled so as to be able to plot the support vectors
svc = svm.SVC(kernel ='linear', C = 1).fit(X, y) 
 # create a mesh to plot
x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
h = (x_max / x_min)/100
xx, yy = np.meshgrid(np.arange(x_min, x_max, h),       
  np.arange(y_min, y_max, h)) 

 # Plot the data for Proper Visual Representation
plt.subplot(1, 1, 1) 
 # Predict the result by giving Data to the model
Z = svc.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)
plt.contourf(xx, yy, Z, cmap = plt.cm.Paired, alpha = 0.8) 
plt.scatter(X[:, 0], X[:, 1], c = y, cmap = plt.cm.Paired)
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.xlim(xx.min(), xx.max())
plt.title('SVC with linear kernel') 
 # Output the Plot
plt.show()



Q3.


accounts/models.py

from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.db import models

class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError('The Email field must be set')
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)

        return self.create_user(email, password, **extra_fields)

class CustomUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    objects = CustomUserManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['first_name', 'last_name']

    def __str__(self):
        return self.email


accounts/forms.py

from django import forms
from django.contrib.auth.forms import AuthenticationForm

class LoginForm(AuthenticationForm):
    class Meta:
        fields = ['username', 'password']



accounts/views.py

from django.contrib.auth.views import LoginView, LogoutView
from django.urls import reverse_lazy
from django.views.generic.edit import CreateView
from .forms import LoginForm

class CustomLoginView(LoginView):
    template_name = 'accounts/login.html'
    form_class = LoginForm

class CustomLogoutView(LogoutView):
    next_page = reverse_lazy('login')



accounts/urls.py

from django.urls import path
from .views import CustomLoginView, CustomLogoutView

urlpatterns = [
    path('login/', CustomLoginView.as_view(), name='login'),
    path('logout/', CustomLogoutView.as_view(), name='logout'),
]



urls.py

# In your project's urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('accounts/', include('accounts.urls')),
]



templates/accounts/login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
</head>
<body>
    <h2>Login</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Login</button>
    </form>
</body>
</html>


templates/accounts/logout.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logout</title>
</head>
<body>
    <h2>Logout</h2>
    <p>You have been logged out.</p>
</body>
</html>



